注解你可以理解成你编写的代码不是最终的可读性版本，通过在方法或者类上面添加一些标志，
就能帮你自动添加那部分的代码，从而实现相应的功能。
从程序员的角度来看，你用了更少的代码去实现了同样的功能

1.在typescript中使用注解的方式
   typescript的实验性注解在将来可能会改变。
   在tsconfig.json的配置文件中将experimentalDecorators设为true
   
   {
      "compilerOptions":{
        "target":ES5,
        "experimentalDecorators":true
      }
   }
   
   以下把Decorators称为装饰器
   
  装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，访问符，属性或参数上。
  使用的方式:@expression这种形式，其后面必须作为一个函数,它会在运行时被调用，被修饰的声明信息做为参数传入，
  
  function sealed(target){
      //do something
  }
  @sealed   // 和C#一样，添加了#sealed则该类不可被继承
  class Greeter{
       greeting:string;
       construcor(message:string){
       this.greeting = message;
       }
       greet(){
         return "Hello, "+this.greeting;
       }
  }
  
  function sealed(constructor:Function){
       Object.seal(constructor);
       object.seal(constructor.prototype);
  }
  
  1.1 方法装饰器
  @enumerable一个方法装饰器
  class Greeter{
      greeting:string;
      constructor(message:string){
       this.greeting = message;
      }
      @enumerable(false)
      greet(){
         return "Hello, "+this.greeting;
      }
  }
  function enumerable(value:boolean){
   return function(target:any,propertyKey:string,descriptor:PropertyDescriptor){
                   descriptor.enumerable = value;
   };
  }
  
这里的@enumerable(false)是一个装饰器工厂。 当装饰器 @enumerable(false)被调用时，它会修改属性描述符的enumerable属性。


1.2 访问器装饰器
@configurable应用与Point类的成员上:
class Point{
    private _x:number;
    private _y:number;
    constructor(x:number,y:number){
    this._x = x;
    this._y = y;
    }
    @configurable(false)
    get x() {return this._x;}
    @configurable(flase)
    get y() {return this._y;}
}
简单来说，访问装饰器就是用来控制访问的。
function configurable(value:boolean){
  return function(target:any,propertykey:string,descriptor:PropertyDescriptor){
          descriptor.configurable = value;
  };
}
  
1.3 属性装饰器
属性装饰器声明在一个属性声明之前（紧靠着属性声明）。 属性装饰器不能用在声明文件中（.d.ts），或者任何外部上下文（比如 declare的类）里。

属性装饰器表达式会在运行时当作函数被调用，传入下列2个参数：

对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。
成员的名字。
注意  属性描述符不会做为参数传入属性装饰器，这与TypeScript是如何初始化属性装饰器的有关。 因为目前没有办法在定义一个原型对象的成员时描述一个实例属性，并且没办法监视或修改一个属性的初始化方法。返回值也会被忽略。因此，属性描述符只能用来监视类中是否声明了某个名字的属性。

我们可以用它来记录这个属性的元数据，如下例所示：
class Greeter{
   @format("Hellom, %s")
   greeting:string;
   constructor(message:string){
      this.greeting = message;
   }
   greet(){
     let formatString = getFormat(this,"greeting");
     return formatString.replace("%s",this.greeting);
   }
}
  
  
